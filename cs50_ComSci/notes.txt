<!-- 

AI:
        ARTIFICIAL INTELLIGENCE
        Prompt Engineering
        User Prompt

        Generative artificial intelligence

        MACHINE LEARNING
        REINFORCEMENT LEARNING

        Large language models

Router: A server type that Sends data from point A to B.
 DNS Server: Domain Name System Server: Its purpose is to answer questions of the form, fetch the IP address a domain name. Holds a table of Domain name and their IP addresses.
 Root Server
 DHCP
 Packet: A packet of information 
 
 TCP/IP: TCP/IP stands for Transmission Control Protocol / Internet Protocol, and it is the foundational suite of 
        communication protocols used to connect devices on the internet and local networks. It governs how data is sent, transmitted, and received across networks.
        They are two protocols that the internet generally uses nowadays and has
        for some time to get data from point A to point B. TCP/IP is the backbone of the internet. It ensures that devices can communicate regardless of their hardware, software, or location.
        
        TCP: Ensures reliable communication between devices.
                Divides data into packets, sends them, and reassembles them at the destination.
                Handles error checking and packet delivery.

        IP: Handles the addressing and routing of packets so they reach the correct destination.
                Works with IP addresses to identify sender and receiver devices.
                Every computer, every internet work device in the world has an IP address, an internet protocol
                IP is basically a unique identifier of your computer on a network.
                Just like every home or office has a unique address to which one could send a mail. Similarly, every computer if it wants to receive data or send data, needs to have a unique address.
                So that when information is sent or received, it's being sent from or received to the correct location. This addressing scheme, as I said, is called IP addressing.
                Syntax: w.x.y.z - Between 0 - 255. Example: PIv4 - 192.168.1.1 OR IPv6 - 2001:0db8:85a3:0000:0000:8a2e:0370:7334
                Source Address | Destination Address | Sequence address | Port Number 80(HTTP) 443(HTTPS)

        NOTE: TCP is the pair of protocols that the internet uses to get data from point A to point B. IP standardizes how the addresses work.
                And TCP guarantees delivery with those sequence numbers and also helps the servers do more than one thing, helps them multiplex, so to speak, among email, web, video conferencing by using those port numbers.

Port numbers: are numerical identifiers used to direct data to the correct application or service on a device. They work with IP addresses to enable communication over a network. TCP wraps the data with a port number and packet number then Ip wraps it with the receiver's IP address, then the message is sent(via IP).
                Well-known ports (e.g., HTTP: 80(Web page request), HTTPS: 443(Secure webp), FTP: 21(File Transfer Protocol), SMTP: 25 (Sending emails)).

HTTPS/WWW:
        HTTP: is a protocol that governs how web browsers and how web servers speak.
                (HyperText Transfer Protocol) is a protocol/format used to transfer hypertext (web pages) over the internet.  It allows communication between a web browser (client) and a web server.
                A browser (like Chrome) sends an HTTP request to a server. The server processes the request and responds with the requested web page or data.
                Methods: Common HTTP methods include: GET, POST, PUT, DELETE.

                Secure Version: HTTPS: Adds SSL/TLS encryption for secure communication. Example: https://example.com.

        WWW:  is a collection of web pages and resources that are accessible over the internet.  The WWW provides content stored on web servers.
                Purpose: It allows users to access content like text, images, videos, and more via the internet using web browsers.
                Uses HTTP/HTTPS  to transfer data/web content between servers and clients.
                Examples: The Google homepage, YouTube videos, or Wikipedia articles are all part of the World Wide Web.
                Websites on the WWW are identified using URLs (Uniform Resource Locators).

        In Summary: HTTP is the communication protocol that powers the web. WWW is the system of websites and content that HTTP delivers. Think of HTTP as the delivery truck and WWW as the store where you shop for content.
        Host name: www - https://www.example.com
        Domain name: example - https://www.example.com
        Top Level Domain: .com/.edu/.gov/.uk/.org/.net - https://www.example.com, https://www.example.edu, https://www.example.gov

STATUS CODES:
        200 - OK
        301 - Moved Permanently
        401 - Un authorized
        404 - Not Found
        500 - Internal Server Error

Dev Tool: F12
HTML:Markup Language. Elements | Tags | Attributes | Hyperlinks
code hello.html
http-server

CSS: Properties | Selectors
Phishing attacks.

Client-side Validation | Server-side Validation

NOTE: Unlike Python, which runs on the server side-- that is, on the side that is hosting the website, JavaScript applications
        run client side on your own machine when you are visiting a website.
        -->     


FLASK: A framework/microframework; web framework/web server -  Flask is really a third-party library and it's popular in the Python world-- that's
         just going to make it easier to implement web applications using Python.
         Allows you to start a web server by running flask run 

         WEBSITE Vs WEB APPLICATION: Website-Static Content. Web Application-Takes in input/Dynamic Content.
         Flask run
         Structure
         Main Folder
                 app.py
                 templates/
                 index.html
                 static/
                 requirements.txt
        
        Packages:
                Flask: A lightweight web framework for building web apps in Python.
                Flask-SQLAlchemy: Adds SQLAlchemy support to Flask for database handling.
                Flask-Bcrypt: Provides hashing and password management for Flask apps.
                Flask-Login: Manages user session and authentication in Flask apps.
                Flask-Migrate: Handles database migrations using Alembic in Flask apps.
                Jinja: A templating engine for Python used in Flask to render dynamic HTML.


PYTHON: Python Installation:
        Download and Install Python
        Install Python Extension

        Starting Basically in Terminal:
        Open a new file: hello.py
                Write: print("Hello World")
                        userInput = input("What's your name: ")
                        print(f"hello, {userInput}")
                Save.
        In Terminal, Run: python hello.py
        

        Starting with Flask:
        Venv - Virtual Environment Set up:
        cd to project folder
        Run: python -m venv venv
        Venv Activate: Run: .\venv\Scripts\activate
        
        Packages installation: Run: pip install flask flask-sqlalchemy flask-session, flask_migrate, flask_bycrypt
        Set up the Folder Structure:
                app: static, templates, __init__.py, models.py, routes.py
                run.py
                config.py
                requirements.txt
                blog.db(auto-generated)
                venv(auto-generated)
                flask_session(auto-generated)
                migrations(auto-generated)

                app.py/_init_.py:
                        from flask import Flask, render_template
                        app = Flask(__name__)

                        @app.route("/")
                        def index():
                        result = 5 + 10
                        return render_template("index.html", result=result)

                        if __name__ == "__main__":
                        app.run(debug=True)
                HTML:  <p>{{ result }}</p>  

        Run App: 
        .\venv\Scripts\activate
        python run.py
        
        Database set up:
        Activate venv
        Set up/Configure __init__.py
        Set the FLASK_APP Environment Variable: 
                On cmd, Run: set FLASK_APP=run.py
                On Powershell, Run: $env:FLASK_APP = "run.py"
        Create models in models.py
        Run: flask shell in terminal.
        Inside the Flask shell, run: from app import db
        Then run: db.create_all()
        Quit flask shell Run: exit() or quit()
        To Deactivate Venv Run: deactivate


        Migration: Run Database Migrations- Update models/column/table in database
        Exit Virtual Environment : Run; deactivate
        Update the Model in models.py
        Reactivate Virtual Environment
        Set the FLASK_APP Environment Variable: 
                On cmd, Run: set FLASK_APP=run.py
                On Powershell, Run: $env:FLASK_APP = "run.py"
        Verify Your __init__.py Configuration: 
                In __init.py__ add:
                migrate = Migrate(app, db)
                from app import routes, models
        Generate a Migration Script - Run migration in venv; Run:
                flask db init
                flask db migrate -m "Add migrations comment"
                flask db upgrade

        Sass Rerun: sass --watch app/static/scss:app/static/css

        Generating SECRET_KEY: Steps to Properly Manage Flask Secret Key:
        1. Generate a Secure Key: In Venv, Run: python -c "import secrets; print(secrets.token_hex(24))" This will produce a secure key such as 09f823a6b9c923b2e9a7f6f2af3d5c76c3f45ef7c2e4

        2. Create a .env file in the root folder. 
        3. In the .env file, add:
                SECRET_KEY=c7a82b43ad21450e9228f4fa3b75c482
                SQLALCHEMY_DATABASE_URI=sqlite:///blogpost.db
                SESSION_TYPE=filesystem
                Save.
        4. Install python-dotenv: Run: pip install python-dotenv
        5. Load Environment Variables in _init_.py
                In _init_.py, add:
                from dotenv import load_dotenv
                import os

                load_dotenv()

                app.config['SECRET_KEY'] = os.getenv('SECRET_KEY')
                app.config['SQLALCHEMY_DATABASE_URI'] = os.getenv('SQLALCHEMY_DATABASE_URI')
                app.config['SESSION_TYPE'] = os.getenv('SESSION_TYPE')

        6. Run app.


        Hosting on Pythoneverwhere
        Be sure to generate a secret key to load enviroment variables using flask. Steps above.
        Create a .gitignore file. Add: venv/ instance/ migrations/ __pycache__/ *.pyc *.pyo .env static/css/ static/js/ .flaskenv .vscode/ .idea/ flask_session/

        1. Prepare App Structure for Deployment
        2. Log in to PythonAnywhere.
        3. Zip Project Folder to a .zip file.
        4. Go to the Files tab.
                In the root directory e.g /home/essietasha 
                Upload zip Folder
        5. Go to Console tab.
                Close existing console. Create new Bash console.
                Run cd (to navigate to root directory). 
                Run unzip foldername.zip
        6. After unzipping, cd into folder name. e.g cd Techive
        7. Create a Virtual Environment. Activate it.
                Run python3 -m venv venv
                Run source venv/bin/activate

        8. Run pip install flask
        Run pip install -r requirements.txt
        9. Go to Web. Add a new Web App.
        10. WSGI Configuration:

                import sys
                import os

                path = '/home/essietasha/Techive'
                if path not in sys.path:
                sys.path.append(path)
                from run import app as application
        11. Set the Working Directory and Source Code in Web App e.g /home/essietasha/Techive

    12. DEBUG ERRORS:
        In Venv, Find out the full path of your venv. Run: echo $VIRTUAL_ENV
        You should see sth like: /home/englishwithessie/Master_English_With_Essie/venv PASTE THIS INTO THE VENV PART OF THE WEBAPP Page
        Save + Reload the Web App

        If u got an error like: This virtualenv seems to have the wrong Python version (3.13 instead of 3.10):
            Delete your current venv. NOT IN VENV(deactivate venv), In Bash(cd into project folder) Run: rm -rf venv
            Create a new virtualenv with Python 3.10 still in bash, Run: python3.10 -m venv venv
            Activate the new venv, Run: source venv/bin/activate
            Install all requirements, Run: pip install -r requirements.txt
            Reload the Web App


        Key changes/not necessary:
        Static/Template set up in __init__.py: 
                app = Flask(__name__, static_folder="static", template_folder="templates")

        For typing extension: In requirements.txt, update typing extensions to be: typing_extensions==4.12.2

        Requirements.txt:
                To Create requirements.txt: Run pip freeze > requirements.txt
                To Install Dependencies: Run pip install -r requirements.txt


        STEPS To Recreate/Drop Database / Drop Tables Manually via Flask Shell
        Drop All Tables
                In venv: Run 
                flask shell
                from app import db
                db.drop_all()

        Recreate Database / If Using Flask Migrate
        NOTE: Don't use shell for this
                In venv: Run 
                flask db migrate -m "Recreating the database"
                flask db upgrade  ###### To Apply migrations

                OR
                In venv: Run  
                flask shell
                from app import db OR 
                db.create_all()

        DELETE ENTIRE Database: CAUTION!!! ALL FILES AND DB FILES WILL BE LOST!
            Delete the blogpost.db file in instance folder
            In Venv Run: Remove-Item -Recurse -Force migrations ORRR Run: rm -r migrations To Remove migrations folder
            Then in Venv Run:
                    flask db init
                    flask db migrate -m "Recreating database"
                    flask db upgrade


        CSFR AND XSS Malware Attack Protection
        1. Enable CSRF (Cross-Site Request Forgery) Protection.
        2. Using WTForms for Form Validation
        3. Validating Inputs: Allow only alphnum characters. 
                import re
        4. Sanitize Inputs (XSS Protection): Bleach. This will prevent any malicious scripts from being executed if the input contains any <script> or HTML tags.
                python -m pip install bleach
                import bleach
        4. Validating Passwords: Regex for Strong Password Validation.
        5. Password hashing: with libraries like werkzeug.security's generate_password_hash and check_password_hash.
        6. Setting your password input field as type="password" in HTML. 


        //Create admin.py Update db.
        In venv: Run python admin.py